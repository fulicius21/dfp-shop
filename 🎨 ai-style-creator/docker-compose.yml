# ================================================
# DressForPleasure AI Style Creator - Docker Compose
# ================================================
#
# Vollständige Deployment-Konfiguration für das AI Style Creator System
# mit allen Services und Dependencies für Production-Ready Setup
#
# Services:
# - AI Engine (FastAPI + Hugging Face Models)
# - Admin Dashboard (React + TypeScript)  
# - Telegram Bot (Python)
# - PostgreSQL Database
# - Redis Cache & Job Queue
# - Nginx Reverse Proxy
# - Monitoring (Prometheus + Grafana)
#
# Author: DressForPleasure Dev Team
# Version: 1.0.0

version: '3.8'

# ================================================
# Network Configuration
# ================================================
networks:
  ai-style-creator:
    driver: bridge
    name: ai-style-creator-network

# ================================================
# Volume Configuration
# ================================================
volumes:
  # Database
  postgres_data:
    name: ai-style-creator-postgres
  
  # Redis
  redis_data:
    name: ai-style-creator-redis
  
  # AI Models & Cache
  ai_models_cache:
    name: ai-style-creator-models
  
  # Processed Files
  processed_files:
    name: ai-style-creator-files
  
  # Uploads
  upload_files:
    name: ai-style-creator-uploads
  
  # Monitoring
  prometheus_data:
    name: ai-style-creator-prometheus
  
  grafana_data:
    name: ai-style-creator-grafana

# ================================================
# Services Configuration
# ================================================
services:

  # ============================================================================
  # AI Processing Engine (Core Service)
  # ============================================================================
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
      args:
        - PYTHON_VERSION=3.11
        - POETRY_VERSION=1.7.1
    container_name: ai-style-creator-engine
    restart: unless-stopped
    environment:
      # Core Settings
      - AI_ENGINE_DEBUG=false
      - AI_ENGINE_ENVIRONMENT=production
      - AI_ENGINE_HOST=0.0.0.0
      - AI_ENGINE_PORT=8001
      - AI_ENGINE_WORKERS=4
      
      # Security
      - AI_ENGINE_SECRET_KEY=${AI_ENGINE_SECRET_KEY}
      - AI_ENGINE_API_KEY_HEADER=X-API-Key
      - AI_ENGINE_ADMIN_API_KEY=${AI_ENGINE_ADMIN_API_KEY}
      
      # Database & Cache
      - AI_ENGINE_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/dressforp_ai
      - AI_ENGINE_REDIS_URL=redis://redis:6379/0
      
      # AI Models
      - AI_ENGINE_HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - AI_ENGINE_HF_CACHE_DIR=/app/models/huggingface
      - AI_ENGINE_SD_MODEL_NAME=runwayml/stable-diffusion-v1-5
      - AI_ENGINE_CONTROLNET_MODEL=lllyasviel/sd-controlnet-canny
      - AI_ENGINE_CONTENT_MODEL_NAME=microsoft/DialoGPT-medium
      - AI_ENGINE_BLIP_MODEL_NAME=Salesforce/blip-image-captioning-base
      
      # Storage
      - AI_ENGINE_UPLOAD_DIR=/app/uploads
      - AI_ENGINE_PROCESSED_DIR=/app/processed
      - AI_ENGINE_TEMP_DIR=/app/temp
      
      # Processing
      - AI_ENGINE_MAX_CONCURRENT_JOBS=4
      - AI_ENGINE_JOB_TIMEOUT_SECONDS=600
      - AI_ENGINE_MAX_BATCH_SIZE=10
      - AI_ENGINE_MAX_IMAGE_SIZE=1024
      - AI_ENGINE_MODEL_DEVICE=auto
      - AI_ENGINE_USE_HALF_PRECISION=true
      
      # Integration
      - AI_ENGINE_BACKEND_API_URL=http://backend:3000/api
      - AI_ENGINE_BACKEND_API_KEY=${BACKEND_API_KEY}
      - AI_ENGINE_TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - AI_ENGINE_TELEGRAM_ADMIN_CHAT_ID=${TELEGRAM_ADMIN_CHAT_ID}
      
      # Monitoring
      - AI_ENGINE_ENABLE_METRICS=true
      - AI_ENGINE_METRICS_PORT=8002
      - AI_ENGINE_SENTRY_DSN=${SENTRY_DSN}
      
      # DSGVO & Compliance
      - AI_ENGINE_DATA_RETENTION_DAYS=30
      - AI_ENGINE_AUTO_DELETE_PROCESSED=true
      - AI_ENGINE_DELETE_AFTER_DAYS=7
      - AI_ENGINE_ANONYMIZE_METADATA=true
      
    ports:
      - "8001:8001"  # AI Engine API
      - "8002:8002"  # Metrics
    
    volumes:
      - ai_models_cache:/app/models
      - processed_files:/app/processed
      - upload_files:/app/uploads
      - ./ai-engine/logs:/app/logs
    
    depends_on:
      - postgres
      - redis
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s  # AI models need time to load
    
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # ============================================================================
  # Admin Dashboard (React Frontend)
  # ============================================================================
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=18
        - VITE_API_URL=http://localhost:8001
        - VITE_BACKEND_URL=http://localhost:3000
    container_name: ai-style-creator-dashboard
    restart: unless-stopped
    environment:
      - VITE_AI_ENGINE_URL=http://ai-engine:8001
      - VITE_BACKEND_URL=http://backend:3000
      - VITE_APP_TITLE=DressForPleasure AI Style Creator
      - VITE_APP_VERSION=1.0.0
    
    ports:
      - "3001:3000"
    
    depends_on:
      - ai-engine
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ============================================================================
  # Telegram Bot Service
  # ============================================================================
  telegram-bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: ai-style-creator-telegram-bot
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_ADMIN_CHAT_IDS=${TELEGRAM_ADMIN_CHAT_IDS}
      - AI_ENGINE_URL=http://ai-engine:8001
      - AI_ENGINE_API_KEY=${AI_ENGINE_API_KEY}
      - BACKEND_API_URL=http://backend:3000/api
      - BACKEND_API_TOKEN=${BACKEND_API_TOKEN}
      - DASHBOARD_URL=${DASHBOARD_URL:-http://localhost:3001}
    
    depends_on:
      - ai-engine
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://ai-engine:8001/health')"]
      interval: 60s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Database Services
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: ai-style-creator-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=dressforp_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ai-engine/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dressforp_ai"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB

  redis:
    image: redis:7-alpine
    container_name: ai-style-creator-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_data:/data
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ============================================================================
  # Reverse Proxy & Load Balancer
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-style-creator-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - processed_files:/var/www/processed:ro
    
    depends_on:
      - ai-engine
      - admin-dashboard
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ============================================================================
  # Monitoring & Observability
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ai-style-creator-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.0
    container_name: ai-style-creator-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    ports:
      - "3000:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    depends_on:
      - prometheus
    
    networks:
      - ai-style-creator
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ============================================================================
  # Utility Services
  # ============================================================================
  
  # File Cleanup Service
  file-cleanup:
    image: alpine:3.18
    container_name: ai-style-creator-cleanup
    restart: unless-stopped
    
    volumes:
      - processed_files:/data/processed
      - upload_files:/data/uploads
      - ./scripts/cleanup.sh:/cleanup.sh:ro
    
    command: >
      sh -c "
        while true; do
          echo 'Running file cleanup...'
          sh /cleanup.sh
          echo 'Cleanup completed. Sleeping for 1 hour...'
          sleep 3600
        done
      "
    
    networks:
      - ai-style-creator

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: ai-style-creator-backup
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    
    command: >
      sh -c "
        apk add --no-cache dcron
        echo '${BACKUP_SCHEDULE:-0 2 * * *} sh /backup.sh' | crontab -
        crond -f
      "
    
    depends_on:
      - postgres
    
    networks:
      - ai-style-creator

# ================================================
# Development Overrides
# ================================================
# Für Development mit: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

---
# Development Configuration
version: '3.8'

# Uncomment for development mode
# services:
#   ai-engine:
#     environment:
#       - AI_ENGINE_DEBUG=true
#       - AI_ENGINE_ENVIRONMENT=development
#       - AI_ENGINE_LOG_LEVEL=DEBUG
#     volumes:
#       - ./ai-engine:/app:cached
#     command: uvicorn src.main:app --host 0.0.0.0 --port 8001 --reload
#   
#   admin-dashboard:
#     volumes:
#       - ./admin-dashboard/src:/app/src:cached
#     command: npm run dev -- --host 0.0.0.0
#   
#   telegram-bot:
#     volumes:
#       - ./telegram-bot/src:/app/src:cached
#     command: python -m src.ai_style_bot