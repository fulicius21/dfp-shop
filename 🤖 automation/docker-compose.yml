# ==============================================
# DressForPleasure n8n Automation Stack
# ==============================================

version: '3.8'

services:
  # ========================
  # n8n Workflow Engine
  # ========================
  n8n:
    image: n8nio/n8n:latest
    container_name: dressforp-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      # Basic Configuration
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=DressForPleasure2024!
      
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_secure_password
      
      # General Configuration
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Europe/Berlin
      
      # Security
      - N8N_JWT_AUTH_ACTIVE=true
      - N8N_JWT_AUTH_HEADER=authorization
      - N8N_JWT_AUTH_HEADER_VALUE_PREFIX=Bearer
      
      # Workflow Configuration
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_DEFAULT_LOCALE=de
      
      # External Services
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console,file
      - N8N_LOG_FILE_LOCATION=/home/node/.n8n/logs/
      
      # Custom Nodes Path
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom
      
      # Execution Configuration
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_MAX_AGE=336
      
      # DressForPleasure Specific Environment Variables
      - DRESSFORP_API_URL=http://host.docker.internal:3000/api
      - DRESSFORP_BACKEND_URL=http://host.docker.internal:3000
      - DRESSFORP_FRONTEND_URL=https://kxlm6uopg4.space.minimax.io
      - DRESSFORP_WEBHOOK_SECRET=${DRESSFORP_WEBHOOK_SECRET:-default_webhook_secret}
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./credentials:/home/node/.n8n/credentials
      - ./custom-nodes:/home/node/.n8n/custom
      - ./logs:/home/node/.n8n/logs
      - ./backup:/home/node/.n8n/backup
    networks:
      - n8n-network
    depends_on:
      n8n-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================
  # PostgreSQL f端r n8n
  # ========================
  n8n-postgres:
    image: postgres:15-alpine
    container_name: dressforp-n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=n8n_secure_password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - n8n_postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - n8n-network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n_user -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================
  # Redis f端r Caching (Optional)
  # ========================
  n8n-redis:
    image: redis:7-alpine
    container_name: dressforp-n8n-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - n8n_redis_data:/data
    networks:
      - n8n-network
    command: redis-server --appendonly yes --requirepass redis_secure_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================
  # n8n Worker (f端r High-Load Scenarios)
  # ========================
  n8n-worker:
    image: n8nio/n8n:latest
    container_name: dressforp-n8n-worker
    restart: unless-stopped
    command: n8n worker
    environment:
      # Database Configuration (same as main n8n)
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_secure_password
      
      # Worker Configuration
      - N8N_LOG_LEVEL=info
      - EXECUTIONS_PROCESS=own
      - QUEUE_BULL_REDIS_HOST=n8n-redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=redis_secure_password
      
      # DressForPleasure Configuration
      - DRESSFORP_API_URL=http://host.docker.internal:3000/api
      - DRESSFORP_BACKEND_URL=http://host.docker.internal:3000
      
    volumes:
      - n8n_data:/home/node/.n8n
      - ./custom-nodes:/home/node/.n8n/custom
    networks:
      - n8n-network
    depends_on:
      - n8n-postgres
      - n8n-redis

  # ========================
  # Monitoring mit Prometheus (Optional)
  # ========================
  prometheus:
    image: prom/prometheus:latest
    container_name: dressforp-n8n-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - n8n-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ========================
  # Grafana f端r Dashboards (Optional)
  # ========================
  grafana:
    image: grafana/grafana:latest
    container_name: dressforp-n8n-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=DressForPleasure2024!
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - n8n-network
    depends_on:
      - prometheus

# ========================
# Volumes
# ========================
volumes:
  n8n_data:
    driver: local
  n8n_postgres_data:
    driver: local
  n8n_redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ========================
# Networks
# ========================
networks:
  n8n-network:
    driver: bridge
    name: dressforp-n8n-network

# ========================
# Health Check Services
# ========================
