# Docker Compose f端r DressForPleasure Backend Development

version: '3.8'

services:
  # ========================
  # PostgreSQL Database
  # ========================
  database:
    image: postgres:15-alpine
    container_name: dressforp-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: dressforp_db
      POSTGRES_USER: dressforp_user
      POSTGRES_PASSWORD: dressforp_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - dressforp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dressforp_user -d dressforp_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================
  # Backend API (Development)
  # ========================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dressforp-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      HOST: 0.0.0.0
      
      # Database
      DATABASE_URL: postgresql://dressforp_user:dressforp_password@database:5432/dressforp_db
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: dressforp_user
      DB_PASSWORD: dressforp_password
      DB_NAME: dressforp_db
      
      # JWT
      JWT_SECRET: development_jwt_secret_please_change_in_production
      JWT_REFRESH_SECRET: development_refresh_secret_please_change_in_production
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_EXPIRES_IN: 30d
      
      # Admin
      ADMIN_EMAIL: admin@dressforp.com
      ADMIN_PASSWORD: SecureAdmin123!
      
      # CORS
      CORS_ORIGIN: http://localhost:5173,http://localhost:3000
      CORS_CREDENTIALS: true
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # DSGVO
      GDPR_COMPLIANCE_MODE: true
      DATA_RETENTION_DAYS: 2555
      
      # Logging
      LOG_LEVEL: debug
      
      # Features (f端r Development)
      FEATURE_ANALYTICS: true
      FEATURE_EXPORT: true
      
    ports:
      - "3000:3000"
      - "9229:9229" # Debugger port
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - dressforp-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================
  # Redis (f端r Sessions/Cache)
  # ========================
  redis:
    image: redis:7-alpine
    container_name: dressforp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dressforp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ========================
  # pgAdmin (f端r Database Management)
  # ========================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dressforp-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dressforp.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - dressforp-network
    depends_on:
      - database

# ========================
# Volumes
# ========================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# ========================
# Networks
# ========================
networks:
  dressforp-network:
    driver: bridge
    name: dressforp-network

# ========================
# Production Override (optional)
# ========================
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
